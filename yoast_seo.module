<?php

/**
 * @file
 * Contains yoast_seo.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Form\FormStateInterface;
use Drupal\yoast_seo\Form\AnalysisFormHandler;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function yoast_seo_form_field_storage_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  if ($form_state->getFormObject()->getEntity()->getType() == 'yoast_seo') {
    // Hide the cardinality field.
    $form['cardinality_container']['#access'] = FALSE;
    $form['cardinality_container']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_field_access().
 */
function yoast_seo_entity_field_access($operation, $field_definition, $account, $items = NULL) {
  if ($field_definition->getName() == 'field_yoast_seo') {
    return AccessResult::forbiddenIf(
      !($account->hasPermission('use yoast seo') || $account->hasPermission('administer yoast seo'))
      || !($account->hasPermission('create url aliases') || $account->hasPermission('administer url aliases'))
      // Such edit meta tags permission doesn't exist anymore, and administer
      // meta tags is too restrictive.
      // Wait or changes.
      // || ! ( $account->hasPermission('edit meta tags') ||
      // $account->hasPermission('administer meta tags') )
    )->cachePerPermissions();
  }

  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_theme().
 */
function yoast_seo_theme() {
  $theme['yoast_snippet'] = [
    'variables' => [
      'wrapper_target_id' => NULL,
      'snippet_target_id' => NULL,
      'output_target_id' => NULL,
    ],
  ];

  $theme['overall_score'] = [
    'variables' => [
      'overall_score_target_id' => NULL,
      'overall_score' => NULL,
    ],
    'template' => 'overall_score',
  ];

  $theme['view_overall_score'] = [
    'variables' => [
      'overall_score' => NULL,
    ],
    'template' => 'view_overall_score',
  ];

  $theme['content_score'] = [
    'variables' => [],
    'template' => 'content_score',
  ];

  return $theme;
}

/**
 * Implements hook_entity_type_build().
 *
 * Sets the default yoast_seo_form form handler to all entity types.
 *
 * @see \Drupal\Core\Entity\Annotation\EntityType
 */
function yoast_seo_entity_type_build(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  foreach ($entity_types as &$entity_type) {
    if (!$entity_type->hasHandlerClass('yoast_seo_preview_form')) {
      $entity_type->setHandlerClass('yoast_seo_preview_form', AnalysisFormHandler::class);
    }
  }
}

/**
 * Alter the settings used for displaying an entity.
 *
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 *   The entity view display that will be used to display the entity
 *   components.
 * @param array $context
 *   An associative array containing:
 *   - entity_type: The entity type, e.g., 'node' or 'user'.
 *   - bundle: The bundle, e.g., 'page' or 'article'.
 *   - view_mode: The view mode, e.g., 'full', 'teaser', etc.
 *
 * @ingroup entity_crud
 */
function yoast_seo_entity_view_display_alter(EntityViewDisplayInterface $display, array $context) {
  /* @var \Drupal\yoast_seo\SeoManager $seo_manager */
  $seo_manager = \Drupal::service('yoast_seo.manager');
  $supported_types = $seo_manager->getSupportedEntityTypes();

  // Leave Yoast field labels out of the display.
  if (!empty($supported_types[$context['entity_type']]) && $context['view_mode'] == 'full') {
    foreach ($display->getComponents() as $name => $options) {
      if ($name == 'field_yoast_seo') {
        $display->removeComponent($name);
      }
    }
  }
}
